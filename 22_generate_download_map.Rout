
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-suse-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Using binary PPM for Linux distribution: opensuse-leap (version 15.6)
- Project '~/Workspace/Github/economics-open-science' loaded. [renv 1.1.1]
> # Generate a world map of Stata downloads
> # The map shows circles for each country, with the diameter defined by 
> # count of downloads normalized by the average download for any country
> 
> source(file.path(rprojroot::find_root(rprojroot::has_file("config.R")),"config.R"),echo=FALSE)
Files already there, not re-downloading
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> library(viridis)
Loading required package: viridisLite
> library(maps)

Attaching package: ‘maps’

The following object is masked from ‘package:viridis’:

    unemp

> library(mapdata)
> library(tidyr)
> library(tidylog)

Attaching package: ‘tidylog’

The following objects are masked from ‘package:tidyr’:

    drop_na, fill, gather, pivot_longer, pivot_wider, replace_na,
    separate_wider_delim, separate_wider_position,
    separate_wider_regex, spread, uncount

The following objects are masked from ‘package:dplyr’:

    add_count, add_tally, anti_join, count, distinct, distinct_all,
    distinct_at, distinct_if, filter, filter_all, filter_at, filter_if,
    full_join, group_by, group_by_all, group_by_at, group_by_if,
    inner_join, left_join, mutate, mutate_all, mutate_at, mutate_if,
    relocate, rename, rename_all, rename_at, rename_if, rename_with,
    right_join, sample_frac, sample_n, select, select_all, select_at,
    select_if, semi_join, slice, slice_head, slice_max, slice_min,
    slice_sample, slice_tail, summarise, summarise_all, summarise_at,
    summarise_if, summarize, summarize_all, summarize_at, summarize_if,
    tally, top_frac, top_n, transmute, transmute_all, transmute_at,
    transmute_if, ungroup

The following object is masked from ‘package:stats’:

    filter

> 
> # Check if geolocations data exists
> if (file.exists(file.path(interwrk,"geolocations.rds"))) {
+   geolocations <- readRDS(file.path(interwrk,"geolocations.rds"))
+ } else {
+   stop("geolocations.rds not found in interwrk directory. Please run 11_geocode_stata_step2.R first.")
+ }
>   # Rename some countries to match the names in the map data
> country_name_map <- c(
+   "United States" = "USA",
+   "United Kingdom" = "UK",
+   "Türkiye" = "Turkey",
+   "The Netherlands" = "Netherlands",
+   "Hong Kong" = "China",
+   "Macao" = "China"
+   # Add more mappings if needed
+ )
> 
> # Count downloads by country
> country_downloads <- geolocations %>%
+     filter(!is.na(country_name)) %>%
+     mutate(map_country = ifelse(country_name %in% names(country_name_map), 
+                                                          country_name_map[country_name], 
+                                                          country_name)) %>%
+     group_by(map_country) %>%
+     summarise(download_count = n(), .groups = "drop")
filter: removed 6,720,959 rows (39%), 10,709,152 rows remaining
mutate: new variable 'map_country' (character) with 173 unique values and 0% NA
group_by: one grouping variable (map_country)
summarise: now 173 rows and 2 columns, ungrouped
> 
> # Calculate average downloads per country
> avg_downloads <- mean(country_downloads$download_count, na.rm = TRUE)
> 
> # Calculate median downloads per country
> median_downloads <- median(country_downloads$download_count, na.rm = TRUE)
> 
> # Calculate number of countries with more than 10 downloads
> 
> country_downloads %>% filter(download_count > 50) %>% distinct(map_country) %>% nrow()
filter: removed 20 rows (12%), 153 rows remaining
distinct: no rows removed
[1] 153
> 
> # Normalize by median downloads
> country_downloads <- country_downloads %>%
+     mutate(normalized_downloads = download_count / median_downloads)
mutate: new variable 'normalized_downloads' (double) with 168 unique values and 0% NA
> 
> # Get world map data
> world_map <- map_data("world")
> 
> 
> # Calculate centroids for each country to place circles
> other_centroids <- world_map %>%
+   filter(region != "USA" & region != "Antarctica") %>%
+   group_by(region) %>%
+   summarise(
+     long = mean(long, na.rm = TRUE),
+     lat = mean(lat, na.rm = TRUE),
+     .groups = "drop"
+     ) %>%
+     # also filter out islands in the Pacific by longitude
+     filter(long > -125 & long < 160)
filter: removed 10,411 rows (10%), 88,927 rows remaining
group_by: one grouping variable (region)
summarise: now 250 rows and 3 columns, ungrouped
filter: removed 13 rows (5%), 237 rows remaining
>   
> # Special for the US: Calculate mainland USA centroid
> # Properly filter out Alaska and Hawaii using their longitude/latitude bounds
> usa_centroids <- world_map %>%
+   filter(region == "USA") %>%
+   # Continental US roughly between these coordinates
+   filter(long > -125 & long < -65 & lat > 25 & lat < 50) %>%
+   summarise(
+     region = "USA",
+     long = mean(long, na.rm = TRUE),
+     lat = mean(lat, na.rm = TRUE)
+   )
filter: removed 93,585 rows (94%), 5,753 rows remaining
filter: removed 3,306 rows (57%), 2,447 rows remaining
summarise: now one row and 3 columns, ungrouped
> 
> # Add the US centroid back to the country centroids
> country_centroids <- bind_rows(other_centroids, usa_centroids) %>%
+    # Shift Canada towards the south
+     mutate(lat = ifelse(region == "Canada",  54, lat),
+            long = ifelse(region == "Canada",  -100, long))
mutate: changed one value (<1%) of 'long' (0 new NAs)
        changed one value (<1%) of 'lat' (0 new NAs)
> 
> # Join download data with centroids
> country_data <- country_centroids %>%
+   left_join(country_downloads, by = c("region" = "map_country")) %>%
+   filter(!is.na(normalized_downloads)) 
left_join: added 2 columns (download_count, normalized_downloads)
           > rows only in x                   82
           > rows only in country_downloads ( 17)
           > matched rows                    156
           >                                =====
           > rows total                      238
filter: removed 82 rows (34%), 156 rows remaining
> 
> # Create the map
> download_map <- ggplot() +
+   geom_map(data = world_map, map = world_map %>% filter(region != "Antarctica"),
+            aes(x = long, y = lat, map_id = region),
+            color = "gray70", fill = "gray90", size = 0.3) +
+   geom_point(data = country_data, 
+              aes(x = long, y = lat, size = normalized_downloads, color = normalized_downloads),
+              alpha = 0.7) +
+   scale_size_continuous(name = "Downloads\n(normalized)", range = c(0, 10)) +
+   scale_color_viridis(name = "Downloads\n(normalized)",direction = -1) +
+   coord_fixed(1.3) +
+   theme_minimal() +
+   labs(
+     title = "Stata Downloads by Country",
+     subtitle = "Circle size represents downloads normalized by median downloads per country",
+     caption = "Source: SSC log files"
+   ) +
+   theme(
+     legend.position = "bottom",
+     panel.grid = element_blank(),
+     axis.title = element_blank(),
+     axis.text = element_blank(),
+     axis.ticks = element_blank()
+   )
filter: removed 4,658 rows (5%), 94,680 rows remaining
Warning messages:
1: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead. 
2: In geom_map(data = world_map, map = world_map %>% filter(region !=  :
  Ignoring unknown aesthetics: x and y
> 
> # Save the map
> ggsave(file.path(outputs, "stata_download_map.png"), download_map, width = 10, height = 5, dpi = 300)
> 
> 
> message("Map generation complete. Output saved to ", file.path(outputs, "stata_download_map.png"))
Map generation complete. Output saved to /home/vilhuber/Workspace/Github/economics-open-science/outputs/stata_download_map.png
> 
> proc.time()
   user  system elapsed 
 10.406   0.417  11.087 
