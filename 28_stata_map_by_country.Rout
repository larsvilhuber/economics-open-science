
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-suse-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Using binary PPM for Linux distribution: opensuse-leap (version 15.6)
- Project '~/Workspace/Github/economics-open-science' loaded. [renv 1.1.1]
> # Stata Download Statistics by Country for select
> # This script processes Stata download geolocation data,
> # aggregates by country, creates maps, and computes regional statistics
> 
> source(file.path(rprojroot::find_root(rprojroot::has_file("config.R")),"config.R"),echo=FALSE)
Files already there, not re-downloading
> 
> # Load required libraries
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.4     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(countrycode)
> library(maps)

Attaching package: ‘maps’

The following object is masked from ‘package:purrr’:

    map

> library(ggplot2)
> library(viridis)
Loading required package: viridisLite

Attaching package: ‘viridis’

The following object is masked from ‘package:maps’:

    unemp

> library(scales)

Attaching package: ‘scales’

The following object is masked from ‘package:viridis’:

    viridis_pal

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor

> library(readr)
> library(lubridate)
> library(xtable)
> library(tidylog)

Attaching package: ‘tidylog’

The following objects are masked from ‘package:dplyr’:

    add_count, add_tally, anti_join, count, distinct, distinct_all,
    distinct_at, distinct_if, filter, filter_all, filter_at, filter_if,
    full_join, group_by, group_by_all, group_by_at, group_by_if,
    inner_join, left_join, mutate, mutate_all, mutate_at, mutate_if,
    relocate, rename, rename_all, rename_at, rename_if, rename_with,
    right_join, sample_frac, sample_n, select, select_all, select_at,
    select_if, semi_join, slice, slice_head, slice_max, slice_min,
    slice_sample, slice_tail, summarise, summarise_all, summarise_at,
    summarise_if, summarize, summarize_all, summarize_at, summarize_if,
    tally, top_frac, top_n, transmute, transmute_all, transmute_at,
    transmute_if, ungroup

The following objects are masked from ‘package:tidyr’:

    drop_na, fill, gather, pivot_longer, pivot_wider, replace_na,
    separate_wider_delim, separate_wider_position,
    separate_wider_regex, spread, uncount

The following object is masked from ‘package:stats’:

    filter

> 
> # Load data from disk
> geolocations <- readRDS(file.path(interwrk, "geolocations.rds"))
> 
> # Aggregate by country
> country_stats <- geolocations %>%
+   filter(!is.na(country_code)) %>%
+   group_by(country = country_code) %>%
+   summarise(
+     downloads = n(),
+     .groups = "drop"
+   ) %>%
+   arrange(desc(downloads)) %>%
+   mutate(
+     country_name = countrycode(country, "iso2c", "country.name"),
+     continent = countrycode(country, "iso2c", "continent"),
+     region = countrycode(country, "iso2c", "region")
+   # Caused by warning:
+   # ! Some values were not matched unambiguously: RE 
+   # This is captured below by "continent"
+   ) %>%
+   filter(!is.na(country_name)) %>%
+   mutate(
+     custom_region = case_when(
+       continent == "Europe" ~ "Europe",
+       country == "CN" ~ "China",
+       country == "HK" ~ "China",
+       continent == "Asia" ~ "Rest of Asia",
+       continent == "Africa" ~ "Africa",
+       region == "Latin America & Caribbean" ~ "Latin America & Caribbean",
+       region == "North America" ~ "North America",
+       country == "AU" ~ "Australia",
+       continent == "Oceania" ~ "Rest of Oceania",
+       TRUE ~ "Other"
+     )
+   )
filter: removed 6,720,959 rows (39%), 10,709,152 rows remaining
group_by: one grouping variable (country)
summarise: now 175 rows and 2 columns, ungrouped
mutate: new variable 'country_name' (character) with 175 unique values and 0% NA
        new variable 'continent' (character) with 5 unique values and 0% NA
        new variable 'region' (character) with 8 unique values and 1% NA
filter: no rows removed
mutate: new variable 'custom_region' (character) with 8 unique values and 0% NA
Warning message:
There was 1 warning in `.fun()`.
ℹ In argument: `region = countrycode(country, "iso2c", "region")`.
Caused by warning:
! Some values were not matched unambiguously: RE 
> 
> # Print top 20 countries
> cat("\nTop 20 countries by Stata downloads:\n")

Top 20 countries by Stata downloads:
> print(country_stats %>% head(20) %>% select(country, country_name, downloads, continent, region, custom_region ))
select: columns reordered (country, country_name, downloads, continent, region, …)
# A tibble: 20 × 6
   country country_name        downloads continent region          custom_region
   <chr>   <chr>                   <int> <chr>     <chr>           <chr>        
 1 CN      China                 5408666 Asia      East Asia & Pa… China        
 2 US      United States         3440389 Americas  North America   North America
 3 GB      United Kingdom         290826 Europe    Europe & Centr… Europe       
 4 DE      Germany                158968 Europe    Europe & Centr… Europe       
 5 KR      South Korea             97245 Asia      East Asia & Pa… Rest of Asia 
 6 IN      India                   86807 Asia      South Asia      Rest of Asia 
 7 FR      France                  75508 Europe    Europe & Centr… Europe       
 8 NL      Netherlands             73023 Europe    Europe & Centr… Europe       
 9 IT      Italy                   69337 Europe    Europe & Centr… Europe       
10 CA      Canada                  68799 Americas  North America   North America
11 ID      Indonesia               61911 Asia      East Asia & Pa… Rest of Asia 
12 PE      Peru                    37305 Americas  Latin America … Latin Americ…
13 CO      Colombia                34588 Americas  Latin America … Latin Americ…
14 BE      Belgium                 30567 Europe    Europe & Centr… Europe       
15 HK      Hong Kong SAR China     30145 Asia      East Asia & Pa… China        
16 SG      Singapore               29831 Asia      East Asia & Pa… Rest of Asia 
17 ET      Ethiopia                28827 Africa    Sub-Saharan Af… Africa       
18 ES      Spain                   28144 Europe    Europe & Centr… Europe       
19 AU      Australia               26703 Oceania   East Asia & Pa… Australia    
20 VN      Vietnam                 26138 Asia      East Asia & Pa… Rest of Asia 
> 
> 
> # ================ from here, we do this with and without China ================
> 
> # Function to generate and save all statistics and figures
> generate_stats_and_figures <- function(country_stats, suffix = "") {
+   # Regional statistics
+   regional_stats <- country_stats %>%
+     group_by(custom_region) %>%
+     summarise(
+       countries = n(),
+       `Regional Downloads` = sum(downloads),
+       .groups = "drop"
+     ) %>%
+     mutate(Fraction = round(`Regional Downloads`/sum(`Regional Downloads`)*100,2)) %>%
+     arrange(desc(`Regional Downloads`))
+ 
+   cat("\nRegional statistics for Stata downloads", ifelse(suffix != "", paste0(" (", suffix, ")"), ""), ":\n")
+   print(regional_stats)
+   # Save Latex Table to file using xtable
+   print(xtable(regional_stats, 
+          include.rownames = FALSE,
+          caption = paste0("Regional Statistics for Stata Downloads", ifelse(suffix != "", paste0(" (", suffix, ")"), "")),
+          label = paste0("tab:stata_downloads_regional_stats_select", suffix),
+          table.placement = "H",
+          size = "small",
+          booktabs = TRUE),
+         file = file.path(outputs, paste0("stata_downloads_regional_stats_select", suffix, ".tex")))
+ 
+   # Collapse further to Global South/North
+   global_stats <- regional_stats %>%
+      mutate(`North/South` = case_when(
+        custom_region == "Europe" ~ "Global North",
+        custom_region == "China" ~ "Global North",
+        custom_region == "Rest of Asia" ~ "Global South",
+        custom_region == "Africa" ~ "Global South",
+        custom_region == "Latin America & Caribbean" ~ "Global South",
+        custom_region == "North America" ~ "Global North",
+        custom_region == "Australia" ~ "Global North",
+        custom_region == "Rest of Oceania" ~ "Global South",
+          TRUE ~ "Other"
+      )) %>%
+     group_by(`North/South`) %>%
+     summarize(
+       Countries = sum(countries),
+       Downloads = sum(`Regional Downloads`),
+     .groups = "drop"
+     ) %>%
+     mutate(Fraction = round(Downloads/sum(Downloads)*100,2)) %>%
+     arrange(desc(Downloads))
+ 
+   cat("\nNorth/South statistics for Stata downloads", ifelse(suffix != "", paste0(" (", suffix, ")"), ""), ":\n")
+   print(global_stats)
+   # Save Latex Table to file using xtable
+   print(xtable(global_stats, 
+          include.rownames = FALSE,
+          caption = paste0("Regional Statistics for Stata Downloads", ifelse(suffix != "", paste0(" (", suffix, ")"), "")),
+          label = paste0("tab:stata_downloads_global_stats_select", suffix),
+          table.placement = "H",
+          size = "small",
+          booktabs = TRUE),
+         file = file.path(outputs, paste0("stata_downloads_global_stats_select", suffix, ".tex")))
+ 
+   # Save summary statistics
+   write_csv(country_stats, file.path(interwrk, paste0("stata_downloads_by_country_select", suffix, ".csv")))
+   write_csv(regional_stats, file.path(interwrk, paste0("stata_downloads_by_region_select", suffix, ".csv")))
+   write_csv(global_stats, file.path(interwrk, paste0("stata_downloads_by_global_select", suffix, ".csv")))
+   saveRDS(country_stats, file.path(interwrk, paste0("stata_downloads_by_country_select", suffix, ".rds")))
+   saveRDS(regional_stats, file.path(interwrk, paste0("stata_downloads_by_region_select", suffix, ".rds")))
+   saveRDS(global_stats, file.path(interwrk, paste0("stata_downloads_by_global_select", suffix, ".rds")))
+ 
+   # Create world map visualization
+   world_map <- map_data("world")
+   map_data <- country_stats %>%
+     mutate(region = country_name,
+            region = case_when(
+              country_name == "United States" ~ "USA",
+              country_name == "United Kingdom" ~ "UK",
+              country_name == "Czechia" ~ "Czech Republic",
+              country_name == "Bosnia & Herzegovina" ~ "Bosnia and Herzegovina",
+              country_name == "Congo - Kinshasa" ~ "Democratic Republic of the Congo",
+              country_name == "Congo - Brazzaville" ~ "Republic of Congo",
+              country_name == "Myanmar (Burma)" ~ "Myanmar",
+              country_name == "Côte d’Ivoire" ~ "Ivory Coast",
+              country_name == "Eswatini" ~ "Swaziland",
+              TRUE ~ region
+            )) %>%
+     select(region, downloads)
+   world_map_data <- world_map %>%
+     filter(region != "Antarctica") %>%
+     left_join(map_data, by = "region")
+   world_plot <- ggplot(world_map_data, aes(x = long, y = lat, group = group)) +
+     geom_polygon(aes(fill = downloads), color = "gray70", size = 0.3) +
+     scale_fill_viridis_c(
+       name = "Stata Downloads",
+       trans = "log10",
+       breaks = scales::log_breaks(n = 5),
+       labels = scales::label_number(scale_cut = scales::cut_si("")),
+       na.value = "grey90",
+       direction = -1
+     ) +
+     labs(
+       title = paste0("Stata Downloads by Country", ifelse(suffix != "", paste0(" (", suffix, ")"), "")),
+       subtitle = "Data from SSC log files"
+     ) +
+     theme_minimal() +
+     theme(
+       plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
+       plot.subtitle = element_text(hjust = 0.5, size = 12),
+       plot.caption = element_text(hjust = 0.5, size = 10),
+       legend.position = "bottom",
+       panel.grid = element_blank(),
+       axis.title = element_blank(),
+       axis.text = element_blank(),
+       axis.ticks = element_blank()
+     ) +
+     coord_fixed(1.3)
+   ggsave(file.path(outputs, paste0("stata_downloads_world_map_select", suffix, ".png")), world_plot, 
+          width = 12, height = 8, dpi = 300, bg = "white")
+ 
+   # Create regional bar chart
+   regional_plot <- ggplot(regional_stats, aes(x = reorder(custom_region, `Regional Downloads`), y = `Regional Downloads`)) +
+     geom_col(fill = "steelblue", alpha = 0.8) +
+     coord_flip() +
+     scale_y_continuous(labels = scales::comma_format()) +
+     labs(
+       title = paste0("Stata Downloads by Region", ifelse(suffix != "", paste0(" (", suffix, ")"), "")),
+       x = "Region",
+       y = "Total Downloads"
+     ) +
+     theme_minimal() +
+     theme(
+       plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
+       axis.text = element_text(size = 11),
+       axis.title = element_text(size = 12)
+     )
+   ggsave(file.path(outputs, paste0("stata_downloads_regional_select", suffix, ".png")), regional_plot, 
+          width = 10, height = 6, dpi = 300, bg = "white")
+ }
> 
> # First call: with all data
> generate_stats_and_figures(country_stats, suffix = "")
group_by: one grouping variable (custom_region)
summarise: now 8 rows and 3 columns, ungrouped
mutate: new variable 'Fraction' (double) with 8 unique values and 0% NA

Regional statistics for Stata downloads  :
# A tibble: 8 × 4
  custom_region             countries `Regional Downloads` Fraction
  <chr>                         <int>                <int>    <dbl>
1 China                             2              5438811    50.8 
2 North America                     3              3509194    32.8 
3 Europe                           40               912383     8.52
4 Rest of Asia                     45               521557     4.87
5 Africa                           51               168663     1.57
6 Latin America & Caribbean        28               127078     1.19
7 Australia                         1                26703     0.25
8 Rest of Oceania                   5                 4763     0.04
mutate: new variable 'North/South' (character) with 2 unique values and 0% NA
group_by: one grouping variable (North/South)
summarize: now 2 rows and 3 columns, ungrouped
mutate: new variable 'Fraction' (double) with 2 unique values and 0% NA

North/South statistics for Stata downloads  :
# A tibble: 2 × 4
  `North/South` Countries Downloads Fraction
  <chr>             <int>     <int>    <dbl>
1 Global North         46   9887091    92.3 
2 Global South        129    822061     7.68
mutate: changed 175 values (100%) of 'region' (one fewer NA)
select: dropped 4 variables (country, country_name, continent, custom_region)
filter: removed 4,658 rows (5%), 94,680 rows remaining
left_join: added one column (downloads)
           > rows only in x          7,787
           > rows only in map_data (     8)
           > matched rows           86,893
           >                       ========
           > rows total             94,680
Warning message:
Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead. 
> 
> # Second call: remove China
> generate_stats_and_figures(country_stats %>% filter(custom_region != "China"), suffix = "_nochina")
filter: removed 2 rows (1%), 173 rows remaining
group_by: one grouping variable (custom_region)
summarise: now 7 rows and 3 columns, ungrouped
mutate: new variable 'Fraction' (double) with 7 unique values and 0% NA

Regional statistics for Stata downloads  (_nochina) :
# A tibble: 7 × 4
  custom_region             countries `Regional Downloads` Fraction
  <chr>                         <int>                <int>    <dbl>
1 North America                     3              3509194    66.6 
2 Europe                           40               912383    17.3 
3 Rest of Asia                     45               521557     9.9 
4 Africa                           51               168663     3.2 
5 Latin America & Caribbean        28               127078     2.41
6 Australia                         1                26703     0.51
7 Rest of Oceania                   5                 4763     0.09
mutate: new variable 'North/South' (character) with 2 unique values and 0% NA
group_by: one grouping variable (North/South)
summarize: now 2 rows and 3 columns, ungrouped
mutate: new variable 'Fraction' (double) with 2 unique values and 0% NA

North/South statistics for Stata downloads  (_nochina) :
# A tibble: 2 × 4
  `North/South` Countries Downloads Fraction
  <chr>             <int>     <int>    <dbl>
1 Global North         44   4448280     84.4
2 Global South        129    822061     15.6
mutate: changed 173 values (100%) of 'region' (one fewer NA)
select: dropped 4 variables (country, country_name, continent, custom_region)
filter: removed 4,658 rows (5%), 94,680 rows remaining
left_join: added one column (downloads)
           > rows only in x         10,497
           > rows only in map_data (     7)
           > matched rows           84,183
           >                       ========
           > rows total             94,680
> 
> # Print final summary
> cat("\n=== SUMMARY ===\n")

=== SUMMARY ===
> cat("\nFiles saved:\n")

Files saved:
> cat("- ", file.path(outputs, "stata_downloads_world_map_select.png"), "\n")
-  /home/vilhuber/Workspace/Github/economics-open-science/outputs/stata_downloads_world_map_select.png 
> cat("- ", file.path(outputs, "stata_downloads_regional_select.png"), "\n")
-  /home/vilhuber/Workspace/Github/economics-open-science/outputs/stata_downloads_regional_select.png 
> cat("- ", file.path(outputs, "stata_downloads_regional_stats_select.tex"), "\n")
-  /home/vilhuber/Workspace/Github/economics-open-science/outputs/stata_downloads_regional_stats_select.tex 
> cat("- ", file.path(outputs, "stata_downloads_global_stats_select.tex"), "\n")
-  /home/vilhuber/Workspace/Github/economics-open-science/outputs/stata_downloads_global_stats_select.tex 
> cat("- ", file.path(interwrk, "stata_downloads_by_country_select.csv"), "\n")
-  /home/vilhuber/Workspace/Github/economics-open-science/data/interwrk/stata_downloads_by_country_select.csv 
> cat("- ", file.path(interwrk, "stata_downloads_by_region_select.csv"), "\n")
-  /home/vilhuber/Workspace/Github/economics-open-science/data/interwrk/stata_downloads_by_region_select.csv 
> 
> proc.time()
   user  system elapsed 
 10.373   0.291  11.049 
